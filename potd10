//code 1
class Solution {
    public boolean canBeValid(String inputString, String lockStatus) {
        if (inputString.length() % 2 != 0) 
            return false;

        int balanceCount = 0;
        for (int i = 0; i < inputString.length(); i++) {
            if (lockStatus.charAt(i) == '0' || inputString.charAt(i) == '(') 
                balanceCount++;
            else 
                balanceCount--;
            if (balanceCount < 0) 
                return false;
        }

        balanceCount = 0;
        for (int i = inputString.length() - 1; i >= 0; i--) {
            if (lockStatus.charAt(i) == '0' || inputString.charAt(i) == ')') 
                balanceCount++;
            else 
                balanceCount--;
            if (balanceCount < 0) 
                return false;
        }

        return true;
    }
}

//code 2
class Solution {
    public boolean canBeValid(String s, String locked) {
        int n = s.length();
        if(n%2!=0) return false;
        Stack<Integer> stash = new Stack<>();
        Stack<Integer> unlocked = new Stack<>();
        for(int i = 0; i<n ; i++){
            char ch = s.charAt(i);
            char status = locked.charAt(i);
            if(status=='0'){
                unlocked.push(i);
            }
            else if(ch == '('){
                stash.push(i);
            }
            else{
                if(!stash.isEmpty()){
                    stash.pop();
                }
                else{
                    if(!unlocked.isEmpty()){
                        unlocked.pop();
                    }
                    else{
                        return false;
                    }
                }
            }
        }
        while(!stash.isEmpty()&& !unlocked.isEmpty() && stash.peek()<unlocked.peek()){
            unlocked.pop();
            stash.pop();
        }
        return (stash.isEmpty());
    }
}

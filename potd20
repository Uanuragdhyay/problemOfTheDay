class Solution {
    public int[][] highestPeak(int[][] isWater) {
        int m=isWater.length;
        int n=isWater[0].length;

        // Initialize result matrix with same dimensions as input
        int[][] matrix=new int[m][n];

        // Queue to perform BFS
        Queue<int[]> que=new LinkedList<>();


        // Initialize matrix and queue
        for(int i=0; i<m; i++){
            for(int j=0; j<n; j++){
                if(isWater[i][j]==1){
                    // Water cells have height 0 and are added to queue
                    que.add(new int[]{i,j});
                }
                else{
                    // Mark land cells as unvisited (-1)
                    matrix[i][j]=-1;
                }
            }
        }


        // Possible directions: right, left, down, up
        int[][] directions={ {0,1}, {0,-1}, {1,0}, {-1,0} };

        //BFS Traverse
        while(!que.isEmpty()){
            int[] arr=que.poll();
            int r=arr[0];
            int c=arr[1];

            // Check all adjacent cells
            for(int[] dir:directions){
                int nr=r+dir[0];
                int nc=c+dir[1];

                // If adjacent cell is within boundary and unvisited
                if(nr>=0 && nr<m && nc>=0 && nc<n && matrix[nr][nc]==-1){
                    // Set height to 1 more than current cell
                    matrix[nr][nc]=matrix[r][c]+1;  

                    // Add to queue for further exploration
                    que.add(new int[]{nr,nc});      
                } 
            }
        }

        return matrix;
    }
}

// code 2 

class Solution {
    public int[][] highestPeak(int[][] isWater) {
        int m = isWater.length, n = isWater[0].length;
        int[][] height = new int[m][n];
        Queue<int[]> q = new LinkedList<>();
        
        // Initialize water cells
        for(int i = 0; i < m; i++) {
            for(int j = 0; j < n; j++) {
                height[i][j] = -1;
                if(isWater[i][j] == 1) {
                    height[i][j] = 0;
                    q.offer(new int[]{i, j});
                }
            }
        }
        
        // BFS directions
        int[][] dirs = {{1,0}, {-1,0}, {0,1}, {0,-1}};
        
        // BFS from water to land
        while(!q.isEmpty()) {
            int[] curr = q.poll();
            int x = curr[0], y = curr[1];
            for(int[] dir : dirs) {
                int nx = x + dir[0], ny = y + dir[1];
                if(nx >= 0 && nx < m && ny >= 0 && ny < n && height[nx][ny] == -1) {
                    height[nx][ny] = height[x][y] + 1;
                    q.offer(new int[]{nx, ny});
                }
            }
        }
        return height;
    }
}

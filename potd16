class Solution {
    public int minCost(int[][] grid) {
        int m=grid.length;
        int n=grid[0].length;

        int[][] minCost=new int[m][n];
        for(int i=0; i<m; i++){
            Arrays.fill(minCost[i], Integer.MAX_VALUE);
        }

        Deque<int[]> dque=new ArrayDeque<>();
        dque.offerFirst(new int[]{0,0});
        minCost[0][0]=0;
        
        int[][] direction={ {0,1}, {0,-1}, {1,0}, {-1,0} };

        while(!dque.isEmpty()){
            int[] arr=dque.pollFirst();
            int r=arr[0];
            int c=arr[1];

            //Visited adjacent cells
            for(int i=0; i<4; i++){
                int nr=r+direction[i][0];
                int nc=c+direction[i][1];
                int cost=(grid[r][c]!=(i+1))?1:0;

                if( nr>=0 && nr<m && nc>=0 && nc<n && minCost[r][c]+cost<minCost[nr][nc]){
                    minCost[nr][nc]=minCost[r][c]+cost;

                    if(cost==1){
                        dque.offerLast(new int[]{nr,nc});
                    }else{
                        dque.offerFirst(new int[]{nr,nc});
                    }                   
                }
            }
        }

        return minCost[m-1][n-1];
    }
}

//CODE 2

class Solution {
    public int minCost(int[][] grid) {
        int m = grid.length, n = grid[0].length;
        int[][] dist = new int[m][n];
        for (int[] row : dist) Arrays.fill(row, Integer.MAX_VALUE);
        Deque<int[]> dq = new ArrayDeque<>();
        dq.offerFirst(new int[]{0, 0});
        dist[0][0] = 0;
        int[] dx = {0, 0, 1, -1}, dy = {1, -1, 0, 0};
        
        while (!dq.isEmpty()) {
            int[] curr = dq.pollFirst();
            int x = curr[0], y = curr[1];
            int curDir = grid[x][y] - 1;
            for (int dir = 0; dir < 4; dir++) {
                int nx = x + dx[dir], ny = y + dy[dir];
                if (nx >= 0 && ny >= 0 && nx < m && ny < n) {
                    int cost = dist[x][y] + (dir == curDir ? 0 : 1);
                    if (cost < dist[nx][ny]) {
                        dist[nx][ny] = cost;
                        if (dir == curDir) {
                            dq.offerFirst(new int[]{nx, ny});
                        } else {
                            dq.offerLast(new int[]{nx, ny});
                        }
                    }
                }
            }
        }
        return dist[m - 1][n - 1];
    }
}

//CODE 3


class Solution {
    private int bfs(List<List<int[]>> adj) {
        int n = adj.size();
        Deque<int[]> q = new ArrayDeque<>();
        q.offerFirst(new int[] { 0, 0 });
        int[] dis = new int[n];
        Arrays.fill(dis, Integer.MAX_VALUE);
        dis[0] = 0;

        while (!q.isEmpty()) {
            int[] current = q.pollFirst();
            int curNode = current[0], curCost = current[1];

            for (int[] edge : adj.get(curNode)) {
                int nbr = edge[0], nbrCost = edge[1];
                if (curCost + nbrCost < dis[nbr]) {
                    dis[nbr] = curCost + nbrCost;
                    if (nbrCost == 0) {
                        q.offerFirst(new int[] { nbr, dis[nbr] });
                    } else {
                        q.offerLast(new int[] { nbr, dis[nbr] });
                    }
                }
            }
        }
        return dis[n - 1];
    }

    public int minCost(int[][] grid) {
        int n = grid.length, m = grid[0].length;
        List<List<int[]>> adj = new ArrayList<>();
        for (int i = 0; i < n * m; i++) {
            adj.add(new ArrayList<>());
        }

        int nodeCnt = 0;
        for (int i = 0; i < n; i++) {
            for (int j = 0; j < m; j++) {
                if (i == n - 1 && j == m - 1)
                    continue;

                if (j + 1 < m) {
                    if (grid[i][j] == 1) {
                        adj.get(nodeCnt).add(new int[] { nodeCnt + 1, 0 });
                    } else {
                        adj.get(nodeCnt).add(new int[] { nodeCnt + 1, 1 });
                    }
                }
                if (j - 1 >= 0) {
                    if (grid[i][j] == 2) {
                        adj.get(nodeCnt).add(new int[] { nodeCnt - 1, 0 });
                    } else {
                        adj.get(nodeCnt).add(new int[] { nodeCnt - 1, 1 });
                    }
                }
                if (i + 1 < n) {
                    if (grid[i][j] == 3) {
                        adj.get(nodeCnt).add(new int[] { nodeCnt + m, 0 });
                    } else {
                        adj.get(nodeCnt).add(new int[] { nodeCnt + m, 1 });
                    }
                }
                if (i - 1 >= 0) {
                    if (grid[i][j] == 4) {
                        adj.get(nodeCnt).add(new int[] { nodeCnt - m, 0 });
                    } else {
                        adj.get(nodeCnt).add(new int[] { nodeCnt - m, 1 });
                    }
                }
                nodeCnt++;
            }
        }

        return bfs(adj);
    }
}

//CODE 4

import java.util.*;

class Solution {
    public int minCost(int[][] grid) {
        int n = grid.length;
        int m = grid[0].length;
        PriorityQueue<int[]> pq = new PriorityQueue<>(Comparator.comparingInt(a -> a[0]));
        boolean[][] vis = new boolean[n][m];
        int[][] directions = {{0, 1}, {0, -1}, {1, 0}, {-1, 0}};
        pq.offer(new int[]{0, 0, 0}); // {cost, row, col}

        while (!pq.isEmpty()) {
            int[] curr = pq.poll();
            int d = curr[0], r = curr[1], c = curr[2];
            if (vis[r][c]) continue;
            vis[r][c] = true;
            if (r == n - 1 && c == m - 1) return d;
            int dir = grid[r][c] - 1;
            int nr = r + directions[dir][0];
            int nc = c + directions[dir][1];
            if (isValid(nr, nc, n, m, vis)) {
                pq.offer(new int[]{d, nr, nc});
            }
            for (int i = 0; i < 4; i++) {
                if (i == dir) continue;
                nr = r + directions[i][0];
                nc = c + directions[i][1];
                if (isValid(nr, nc, n, m, vis)) {
                    pq.offer(new int[]{d + 1, nr, nc});
                }
            }
        }
        return -1;
    }

    private boolean isValid(int r, int c, int n, int m, boolean[][] vis) {
        return r >= 0 && c >= 0 && r < n && c < m && !vis[r][c];
    }
}


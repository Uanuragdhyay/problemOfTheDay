class DisjointSet{
    List<Integer> size = new ArrayList<>();
    List<Integer> parent= new ArrayList<>();

    DisjointSet(int n){
        for(int i=0;i<n;i++){
            size.add(1);
            parent.add(i);
        }
    }

    public int findUPar(int node){
        if(node==parent.get(node))
        return node;

        int ulp = findUPar(parent.get(node));
        parent.set(node,ulp);
        return ulp;
    }

    public void unionBySize(int u, int v){
        int ulp_u = findUPar(u);
        int ulp_v = findUPar(v);

        if(ulp_u == ulp_v)
        return;
        else if(size.get(ulp_u) < size.get(ulp_v)){
            parent.set(ulp_u,ulp_v);
            size.set(ulp_v , size.get(ulp_v)+size.get(ulp_u));
        }else{
            parent.set(ulp_v,ulp_u);
            size.set(ulp_u , size.get(ulp_v)+size.get(ulp_u));
        }
    }
}

class Solution {
    public int[] findRedundantConnection(int[][] edges) {
        int n = edges.length;
        DisjointSet ds = new DisjointSet(n+1);
        int ans [] = new int[2];

        for(int i=0;i<n;i++){
            int u = edges[i][0];
            int v = edges[i][1];

            int ulp_u = ds.findUPar(u);
            int ulp_v = ds.findUPar(v);

            if(ulp_u != ulp_v){
                ds.unionBySize(u,v);
            }else{
                ans[0]=u;
                ans[1]=v;
            }
        }
        return ans;
    }
}
